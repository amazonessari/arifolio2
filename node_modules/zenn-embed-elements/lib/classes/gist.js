"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbedGist = void 0;
const jsonp_1 = require("../utils/jsonp");
// ホットリロード等、再レンダリング時のちらつきを防ぐためにhtmlの値をキャッシュする（リロードで消える）
const resultHtmlStore = {};
class EmbedGist extends HTMLElement {
    constructor() {
        super();
        const shadowRoot = this.attachShadow({ mode: 'open' });
        const cachedHtml = resultHtmlStore[this.getCacheKey()];
        if (cachedHtml) {
            shadowRoot.innerHTML = cachedHtml;
        }
    }
    render(data) {
        if (!(this.shadowRoot && data.stylesheet && data.div)) {
            this.renderError();
            return;
        }
        const resultHtml = `<link rel="stylesheet" href="${data.stylesheet}"><div>${data.div}</div>`;
        // gistのhtmlをキャッシュする
        resultHtmlStore[this.getCacheKey()] = resultHtml;
        this.shadowRoot.innerHTML = resultHtml;
    }
    renderError() {
        this.innerHTML = `<div style="text-align: center; margin: 1.5rem 0; color: gray; font-size: 0.9rem;">
    Gistの読み込みに失敗しました<br>  
    ${this.getAttribute('page-url')}
    </div>`;
    }
    getCacheKey() {
        return encodeURIComponent(`${this.getAttribute('page-url')}-${this.getAttribute('encoded-filename')}`);
    }
    connectedCallback() {
        return __awaiter(this, void 0, void 0, function* () {
            // キャッシュがある場合は再リクエストしない
            if (resultHtmlStore[this.getCacheKey()])
                return;
            const pageUrl = this.getAttribute('page-url');
            const encodedFileName = this.getAttribute('encoded-filename');
            if (!pageUrl)
                return;
            const requestURL = pageUrlToRequestUrl(pageUrl) +
                ((encodedFileName === null || encodedFileName === void 0 ? void 0 : encodedFileName.length) ? `?file=${encodedFileName}` : '');
            try {
                const data = yield jsonp_1.getByJsonp(requestURL);
                this.render(data);
            }
            catch (e) {
                console.log(e);
                this.renderError();
            }
        });
    }
}
exports.EmbedGist = EmbedGist;
function pageUrlToRequestUrl(url) {
    if (url.endsWith('.json'))
        return url;
    if (url.endsWith('.js'))
        return url.replace('.js', '.json');
    return `${url}.json`;
}
