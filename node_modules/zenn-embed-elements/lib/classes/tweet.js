"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbedTweet = void 0;
/**
 * iframeの高さを取ってキャッシュすることで、ホットリロードでのガタツキを防ぐ
 */
const heightStore = {};
const containerClassName = 'embed-tweet-container';
const fallbackLinkClassName = 'embed-tweet-link';
class EmbedTweet extends HTMLElement {
    constructor() {
        super();
        const url = this.getAttribute('src');
        if (!url)
            return;
        this.url = url;
        const match = url.match(/https?:\/\/twitter.com\/(.*?)\/status\/(\d+)[/?]?/);
        if (match && match[2]) {
            this.tweetId = match[2];
        }
    }
    connectedCallback() {
        return __awaiter(this, void 0, void 0, function* () {
            this.render();
            this.embedTweet();
        });
    }
    render() {
        const attribute = this.tweetId && heightStore[this.tweetId]
            ? `style="min-height: ${encodeURIComponent(heightStore[this.tweetId])};"`
            : '';
        this.innerHTML = `<div class="${containerClassName}" ${attribute}>
      <a href="${this.url}" class="${fallbackLinkClassName}" rel="nofollow">${this.url}</a>
    </div>`;
    }
    embedTweet() {
        return __awaiter(this, void 0, void 0, function* () {
            const tweetId = this.tweetId;
            if (!(this.url && tweetId)) {
                console.log(`Invalid tweet URL:${this.url}`);
                return;
            }
            const container = this.querySelector(`.${containerClassName}`);
            const disableConversation = this.url.includes('?conversation=none');
            window.twttr.widgets
                .createTweet(this.tweetId, container, Object.assign({ align: 'center' }, (disableConversation ? { conversation: 'none' } : {})))
                .then(() => {
                var _a;
                /**
                 * createTweetではJSONPを使っている（？）ためか、catch でエラーハンドリングができない
                 * => fallback用のリンクをはじめから表示しておき、埋め込みが成功したら削除する
                 */
                (_a = this.querySelector(`.${fallbackLinkClassName}`)) === null || _a === void 0 ? void 0 : _a.remove();
                const iframe = this.querySelector('iframe');
                if (!iframe)
                    return;
                setTimeout(() => {
                    heightStore[tweetId] = iframe.style.height;
                }, 1000); // 正確な高さを取るために少し待つ
            });
        });
    }
}
exports.EmbedTweet = EmbedTweet;
